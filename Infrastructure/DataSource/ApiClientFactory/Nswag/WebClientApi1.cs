////----------------------
//// <auto-generated>
////     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
//// </auto-generated>
////----------------------

//#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
//#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
//#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
//#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
//#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
//#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
//#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
//#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

//namespace Infrastructure.Nswag2
//{
//    using System = global::System;

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class AudioClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public AudioClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task AudioAsync(string text)
//        {
//            return AudioAsync(text, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task AudioAsync(string text, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Audio?");
//            if (text != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("text") + "=").Append(System.Uri.EscapeDataString(ConvertToString(text, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task AsyncAsync(string text)
//        {
//            return AsyncAsync(text, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task AsyncAsync(string text, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Audio/async?");
//            if (text != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("text") + "=").Append(System.Uri.EscapeDataString(ConvertToString(text, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task AsBytesAsync(string data)
//        {
//            return AsBytesAsync(data, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task AsBytesAsync(string data, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Audio/asBytes?");
//            if (data != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("data") + "=").Append(System.Uri.EscapeDataString(ConvertToString(data, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class AuthClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public AuthClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task LogoutAsync(object body)
//        {
//            return LogoutAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task LogoutAsync(object body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/logout");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task RegisterAsync(RegisterRequest body)
//        {
//            return RegisterAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RegisterAsync(RegisterRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/register");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<AccessTokenResponse> LoginAsync(bool? useCookies, bool? useSessionCookies, LoginRequest body)
//        {
//            return LoginAsync(useCookies, useSessionCookies, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<AccessTokenResponse> LoginAsync(bool? useCookies, bool? useSessionCookies, LoginRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/login?");
//            if (useCookies != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("useCookies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(useCookies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (useSessionCookies != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("useSessionCookies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(useSessionCookies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<AccessTokenResponse> RefreshAsync(RefreshRequest body)
//        {
//            return RefreshAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<AccessTokenResponse> RefreshAsync(RefreshRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/refresh");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ChatClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public ChatClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task T2tAsync(string message)
//        {
//            return T2tAsync(message, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task T2tAsync(string message, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Chat/t2t?");
//            if (message != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("message") + "=").Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task Add_messageAsync(string message)
//        {
//            return Add_messageAsync(message, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task Add_messageAsync(string message, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Chat/add_message?");
//            if (message != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("message") + "=").Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task Process_audioAsync(string message)
//        {
//            return Process_audioAsync(message, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task Process_audioAsync(string message, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Chat/process_audio?");
//            if (message != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("message") + "=").Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task Generate_audio_aiAsync(string message)
//        {
//            return Generate_audio_aiAsync(message, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task Generate_audio_aiAsync(string message, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Chat/generate_audio_ai?");
//            if (message != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("message") + "=").Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task T2tstreamAsync(string message)
//        {
//            return T2tstreamAsync(message, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task T2tstreamAsync(string message, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Chat/t2tstream?");
//            if (message != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("message") + "=").Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task T2tstream2Async(string message)
//        {
//            return T2tstream2Async(message, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task T2tstream2Async(string message, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Chat/t2tstream2?");
//            if (message != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("message") + "=").Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class CheckoutClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public CheckoutClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<SessionResponse> CheckoutAsync(string planId)
//        {
//            return CheckoutAsync(planId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SessionResponse> CheckoutAsync(string planId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (planId == null)
//                throw new System.ArgumentNullException("planId");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Checkout/{planId}");
//            urlBuilder_.Replace("{planId}", System.Uri.EscapeDataString(ConvertToString(planId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<SessionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<SessionResponse> ManageAsync()
//        {
//            return ManageAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SessionResponse> ManageAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Checkout/manage");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<SessionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ManageClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public ManageClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<TwoFactorResponse> TwofaAsync(TwoFactorRequest body)
//        {
//            return TwofaAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<TwoFactorResponse> TwofaAsync(TwoFactorRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/manage/twofa");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<TwoFactorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<InfoResponse> InfoGetAsync()
//        {
//            return InfoGetAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<InfoResponse> InfoGetAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/manage/info");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<InfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<InfoResponse> InfoPostAsync(InfoRequest body)
//        {
//            return InfoPostAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<InfoResponse> InfoPostAsync(InfoRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/manage/info");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<InfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PlansClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public PlansClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Get all plans
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task PlansGetAsync()
//        {
//            return PlansGetAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get all plans
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task PlansGetAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create a plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task PlansPostAsync(PlanRequest body)
//        {
//            return PlansPostAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create a plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task PlansPostAsync(PlanRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task GroupAsync()
//        {
//            return GroupAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task GroupAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans/group");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<PlanResponse> PlansGetAsync(string id)
//        {
//            return PlansGetAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<PlanResponse> PlansGetAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task PlansPutAsync(string id, PlanUpdate body)
//        {
//            return PlansPutAsync(id, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task PlansPutAsync(string id, PlanUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task PlansDeleteAsync(string id)
//        {
//            return PlansDeleteAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task PlansDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public PriceClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PriceResponse>> GetAllAsync(string productId, bool? active)
//        {
//            return GetAllAsync(productId, active, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PriceResponse>> GetAllAsync(string productId, bool? active, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Price/get-all?");
//            if (productId != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("productId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (active != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("active") + "=").Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PriceResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<PriceResponse> GetAsync(string id)
//        {
//            return GetAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<PriceResponse> GetAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Price/get/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PriceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<PriceResponse> CreateAsync(PriceCreate body)
//        {
//            return CreateAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<PriceResponse> CreateAsync(PriceCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Price/create");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PriceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<PriceResponse> UpdateAsync(string id, PriceUpdate body)
//        {
//            return UpdateAsync(id, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<PriceResponse> UpdateAsync(string id, PriceUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Price/update/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PriceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ProductClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public ProductClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task ProductsGetAsync(string startingAfter, string endingBefore, long? limit)
//        {
//            return ProductsGetAsync(startingAfter, endingBefore, limit, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task ProductsGetAsync(string startingAfter, string endingBefore, long? limit, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products?");
//            if (startingAfter != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("startingAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startingAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (endingBefore != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("endingBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endingBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (limit != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ProductResponse> ProductsPostAsync(ProductCreate body)
//        {
//            return ProductsPostAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ProductResponse> ProductsPostAsync(ProductCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ProductResponse> ProductsPutAsync(string id, ProductUpdate body)
//        {
//            return ProductsPutAsync(id, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ProductResponse> ProductsPutAsync(string id, ProductUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products?");
//            if (id != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ProductResponse> ProductsGetAsync(string id)
//        {
//            return ProductsGetAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ProductResponse> ProductsGetAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<bool> ProductsDeleteAsync(string id)
//        {
//            return ProductsDeleteAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<bool> ProductsDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ProductResponse> SearchAsync(string query, int? limit, string page)
//        {
//            return SearchAsync(query, limit, page, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ProductResponse> SearchAsync(string query, int? limit, string page, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products/search?");
//            if (query != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (limit != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (page != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class UserClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public UserClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task UserAsync()
//        {
//            return UserAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task UserAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/User");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSubResponse>> CreateSessionAsync()
//        {
//            return CreateSessionAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSubResponse>> CreateSessionAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/User/create-session");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserSubResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class UserSubscriptionsClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public UserSubscriptionsClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSubResponse>> UserSubscriptionsGetAsync()
//        {
//            return UserSubscriptionsGetAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSubResponse>> UserSubscriptionsGetAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/UserSubscriptions");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserSubResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<UserSubResponse> UserSubscriptionsGetAsync(string id)
//        {
//            return UserSubscriptionsGetAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<UserSubResponse> UserSubscriptionsGetAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/UserSubscriptions/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<UserSubResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class AccessTokenResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("tokenType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TokenType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("accessToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string AccessToken { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("expiresIn")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public long ExpiresIn { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string RefreshToken { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class AppUser
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("userName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string UserName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("normalizedUserName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string NormalizedUserName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("normalizedEmail")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string NormalizedEmail { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("emailConfirmed")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool EmailConfirmed { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("passwordHash")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string PasswordHash { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("securityStamp")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string SecurityStamp { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("concurrencyStamp")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ConcurrencyStamp { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string PhoneNumber { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberConfirmed")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool PhoneNumberConfirmed { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("twoFactorEnabled")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool TwoFactorEnabled { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnd")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.DateTimeOffset? LockoutEnd { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("lockoutEnabled")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool LockoutEnabled { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("accessFailedCount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int AccessFailedCount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string CustomerId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("subscriptionId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string SubscriptionId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("subscription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Subscription Subscription { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("roles")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<IdentityRole> Roles { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class Assembly
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("definedTypes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<TypeInfo> DefinedTypes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("exportedTypes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<Type> ExportedTypes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("codeBase")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Obsolete]
//        public string CodeBase { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("entryPoint")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodInfo EntryPoint { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("fullName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string FullName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("imageRuntimeVersion")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ImageRuntimeVersion { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isDynamic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsDynamic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("location")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Location { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("reflectionOnly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ReflectionOnly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCollectible { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFullyTrusted")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFullyTrusted { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("escapedCodeBase")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Obsolete]
//        public string EscapedCodeBase { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("manifestModule")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Module ManifestModule { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("modules")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<Module> Modules { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("globalAssemblyCache")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Obsolete]
//        public bool GlobalAssemblyCache { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hostContext")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long HostContext { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("securityRuleSet")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public SecurityRuleSet SecurityRuleSet { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum CallingConventions
//    {

//        _1 = 1,

//        _2 = 2,

//        _3 = 3,

//        _32 = 32,

//        _64 = 64,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ConstructorInfo
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type DeclaringType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ReflectedType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("module")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Module Module { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCollectible { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MetadataToken { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodAttributes Attributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("methodImplementationFlags")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodImplAttributes MethodImplementationFlags { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("callingConvention")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public CallingConventions CallingConvention { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAbstract { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isConstructor")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsConstructor { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFinal")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFinal { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isHideBySig")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsHideBySig { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSpecialName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsStatic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isVirtual")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsVirtual { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamily { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamilyAndAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamilyOrAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPrivate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPublic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsConstructedGenericMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodDefinition")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericMethodDefinition { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ContainsGenericParameters { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("methodHandle")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public RuntimeMethodHandle MethodHandle { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecuritySafeCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityTransparent { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MemberTypes MemberType { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class CustomAttributeData
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("attributeType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type AttributeType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("constructor")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public ConstructorInfo Constructor { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("constructorArguments")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeTypedArgument> ConstructorArguments { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("namedArguments")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeNamedArgument> NamedArguments { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class CustomAttributeNamedArgument
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("memberInfo")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MemberInfo MemberInfo { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("typedValue")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public CustomAttributeTypedArgument TypedValue { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("memberName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string MemberName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isField")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsField { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class CustomAttributeTypedArgument
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("argumentType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ArgumentType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public object Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum EventAttributes
//    {

//        _0 = 0,

//        _512 = 512,

//        _1024 = 1024,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class EventInfo
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type DeclaringType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ReflectedType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("module")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Module Module { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCollectible { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MetadataToken { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MemberTypes MemberType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public EventAttributes Attributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSpecialName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("addMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodInfo AddMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("removeMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodInfo RemoveMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("raiseMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodInfo RaiseMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isMulticast")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsMulticast { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("eventHandlerType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type EventHandlerType { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum FieldAttributes
//    {

//        _0 = 0,

//        _1 = 1,

//        _2 = 2,

//        _3 = 3,

//        _4 = 4,

//        _5 = 5,

//        _6 = 6,

//        _7 = 7,

//        _16 = 16,

//        _32 = 32,

//        _64 = 64,

//        _128 = 128,

//        _256 = 256,

//        _512 = 512,

//        _1024 = 1024,

//        _4096 = 4096,

//        _8192 = 8192,

//        _32768 = 32768,

//        _38144 = 38144,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class FieldInfo
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type DeclaringType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ReflectedType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("module")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Module Module { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCollectible { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MetadataToken { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MemberTypes MemberType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public FieldAttributes Attributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("fieldType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type FieldType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isInitOnly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsInitOnly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isLiteral")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsLiteral { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNotSerialized")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Obsolete]
//        public bool IsNotSerialized { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPinvokeImpl")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPinvokeImpl { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSpecialName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsStatic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamily { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamilyAndAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamilyOrAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPrivate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPublic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecuritySafeCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityTransparent { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("fieldHandle")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public RuntimeFieldHandle FieldHandle { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum GenericParameterAttributes
//    {

//        _0 = 0,

//        _1 = 1,

//        _2 = 2,

//        _3 = 3,

//        _4 = 4,

//        _8 = 8,

//        _16 = 16,

//        _28 = 28,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class HttpValidationProblemDetails
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("title")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Title { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int? Status { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("detail")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Detail { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("instance")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Instance { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("errors")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [System.Text.Json.Serialization.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ICustomAttributeProvider
//    {

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class IdentityRole
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("normalizedName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string NormalizedName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("concurrencyStamp")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ConcurrencyStamp { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class InfoRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("newEmail")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string NewEmail { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("newPassword")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string NewPassword { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("oldPassword")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string OldPassword { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class InfoResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isEmailConfirmed")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public bool IsEmailConfirmed { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class Int64NullablePriceTierUpToAnyOf
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public object Value { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type Type { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class IntPtr
//    {

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum LayoutKind
//    {

//        _0 = 0,

//        _2 = 2,

//        _3 = 3,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class LoginRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("password")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Password { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("twoFactorCode")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TwoFactorCode { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("twoFactorRecoveryCode")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TwoFactorRecoveryCode { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class MemberInfo
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MemberTypes MemberType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type DeclaringType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ReflectedType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("module")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Module Module { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCollectible { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MetadataToken { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum MemberTypes
//    {

//        _1 = 1,

//        _2 = 2,

//        _4 = 4,

//        _8 = 8,

//        _16 = 16,

//        _32 = 32,

//        _64 = 64,

//        _128 = 128,

//        _191 = 191,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum MethodAttributes
//    {

//        _0 = 0,

//        _1 = 1,

//        _2 = 2,

//        _3 = 3,

//        _4 = 4,

//        _5 = 5,

//        _6 = 6,

//        _7 = 7,

//        _8 = 8,

//        _16 = 16,

//        _32 = 32,

//        _64 = 64,

//        _128 = 128,

//        _256 = 256,

//        _512 = 512,

//        _1024 = 1024,

//        _2048 = 2048,

//        _4096 = 4096,

//        _8192 = 8192,

//        _16384 = 16384,

//        _32768 = 32768,

//        _53248 = 53248,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class MethodBase
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MemberTypes MemberType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type DeclaringType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ReflectedType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("module")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Module Module { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCollectible { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MetadataToken { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodAttributes Attributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("methodImplementationFlags")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodImplAttributes MethodImplementationFlags { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("callingConvention")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public CallingConventions CallingConvention { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAbstract { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isConstructor")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsConstructor { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFinal")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFinal { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isHideBySig")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsHideBySig { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSpecialName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsStatic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isVirtual")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsVirtual { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamily { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamilyAndAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamilyOrAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPrivate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPublic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsConstructedGenericMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodDefinition")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericMethodDefinition { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ContainsGenericParameters { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("methodHandle")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public RuntimeMethodHandle MethodHandle { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecuritySafeCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityTransparent { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum MethodImplAttributes
//    {

//        _0 = 0,

//        _1 = 1,

//        _2 = 2,

//        _3 = 3,

//        _4 = 4,

//        _8 = 8,

//        _16 = 16,

//        _32 = 32,

//        _64 = 64,

//        _128 = 128,

//        _256 = 256,

//        _512 = 512,

//        _4096 = 4096,

//        _65535 = 65535,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class MethodInfo
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type DeclaringType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ReflectedType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("module")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Module Module { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCollectible { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MetadataToken { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodAttributes Attributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("methodImplementationFlags")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodImplAttributes MethodImplementationFlags { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("callingConvention")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public CallingConventions CallingConvention { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAbstract { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isConstructor")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsConstructor { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFinal")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFinal { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isHideBySig")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsHideBySig { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSpecialName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isStatic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsStatic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isVirtual")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsVirtual { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamily")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamily { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamilyAndAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamilyAndAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFamilyOrAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFamilyOrAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPrivate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPrivate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPublic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsConstructedGenericMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodDefinition")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericMethodDefinition { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ContainsGenericParameters { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("methodHandle")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public RuntimeMethodHandle MethodHandle { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecuritySafeCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityTransparent { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MemberTypes MemberType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("returnParameter")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public ParameterInfo ReturnParameter { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("returnType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ReturnType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("returnTypeCustomAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public ICustomAttributeProvider ReturnTypeCustomAttributes { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class Module
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("assembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Assembly Assembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("fullyQualifiedName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string FullyQualifiedName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("mdStreamVersion")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MdStreamVersion { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("moduleVersionId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Guid ModuleVersionId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("scopeName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ScopeName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("moduleHandle")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public ModuleHandle ModuleHandle { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MetadataToken { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ModuleHandle
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("mdStreamVersion")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MdStreamVersion { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum ParameterAttributes
//    {

//        _0 = 0,

//        _1 = 1,

//        _2 = 2,

//        _4 = 4,

//        _8 = 8,

//        _16 = 16,

//        _4096 = 4096,

//        _8192 = 8192,

//        _16384 = 16384,

//        _32768 = 32768,

//        _61440 = 61440,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ParameterInfo
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public ParameterAttributes Attributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("member")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MemberInfo Member { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("parameterType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ParameterType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("position")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int Position { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isIn")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsIn { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isLcid")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsLcid { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isOptional")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsOptional { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isOut")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsOut { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isRetval")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsRetval { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("defaultValue")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public object DefaultValue { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("rawDefaultValue")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public object RawDefaultValue { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hasDefaultValue")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool HasDefaultValue { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MetadataToken { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class Plan
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("productName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string ProductName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("productId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string ProductId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("billingPeriod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string BillingPeriod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("numberRequests")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public long NumberRequests { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("amount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public double Amount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.DateTimeOffset CreatedAt { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("subscriptions")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<Subscription> Subscriptions { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PlanRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("productId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ProductId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("priceId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string PriceId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("numberRequests")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.ComponentModel.DataAnnotations.Range(10, 2147483647)]
//        public int NumberRequests { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PlanResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("productName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ProductName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("productId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ProductId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("billingPeriod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string BillingPeriod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("numberRequests")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int NumberRequests { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("amount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double Amount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("subscriptions")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<Subscription> Subscriptions { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PlanUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("productName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ProductName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("numberRequests")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public int NumberRequests { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("amount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double Amount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("expand")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> Expand { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("extraParams")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.IDictionary<string, object> ExtraParams { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("billingScheme")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string BillingScheme { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("currency")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Currency { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("currencyOptions")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.IDictionary<string, PriceCurrencyOptionsOptions> CurrencyOptions { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customUnitAmount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public PriceCustomUnitAmountOptions CustomUnitAmount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("lookupKey")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string LookupKey { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadata")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("nickname")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Nickname { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("product")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Product { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("productData")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public PriceProductDataOptions ProductData { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("recurring")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public PriceRecurringOptions Recurring { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("taxBehavior")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TaxBehavior { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("tiers")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<PriceTierOptions> Tiers { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("tiersMode")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TiersMode { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("transferLookupKey")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? TransferLookupKey { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("transformQuantity")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public PriceTransformQuantityOptions TransformQuantity { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? UnitAmount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmountDecimal")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double? UnitAmountDecimal { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceCurrencyOptionsCustomUnitAmountOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("enabled")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Enabled { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("maximum")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? Maximum { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("minimum")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? Minimum { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("preset")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? Preset { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceCurrencyOptionsOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("customUnitAmount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public PriceCurrencyOptionsCustomUnitAmountOptions CustomUnitAmount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("taxBehavior")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TaxBehavior { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("tiers")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<PriceCurrencyOptionsTierOptions> Tiers { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? UnitAmount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmountDecimal")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double? UnitAmountDecimal { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceCurrencyOptionsTierOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("flatAmount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? FlatAmount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("flatAmountDecimal")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double? FlatAmountDecimal { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? UnitAmount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmountDecimal")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double? UnitAmountDecimal { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("upTo")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Int64NullablePriceTierUpToAnyOf UpTo { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceCustomUnitAmountOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("enabled")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Enabled { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("maximum")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? Maximum { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("minimum")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? Minimum { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("preset")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? Preset { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceProductDataOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadata")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("statementDescriptor")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string StatementDescriptor { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("taxCode")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TaxCode { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitLabel")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string UnitLabel { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceRecurringOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("aggregateUsage")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string AggregateUsage { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("interval")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Interval { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("intervalCount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? IntervalCount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("meter")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Meter { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("trialPeriodDays")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? TrialPeriodDays { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("usageType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string UsageType { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("object")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Object { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("currency")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Currency { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("interval")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Interval { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmountDecimal")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double UnitAmountDecimal { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long UnitAmount { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceTierOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("flatAmount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? FlatAmount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("flatAmountDecimal")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double? FlatAmountDecimal { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? UnitAmount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmountDecimal")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double? UnitAmountDecimal { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("upTo")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Int64NullablePriceTierUpToAnyOf UpTo { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceTransformQuantityOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("divideBy")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? DivideBy { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("round")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Round { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PriceUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("lookupKey")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string LookupKey { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ProblemDetails
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("title")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Title { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int? Status { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("detail")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Detail { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("instance")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Instance { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [System.Text.Json.Serialization.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ProductCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Description { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("images")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> Images { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("marketingFeatures")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<ProductMarketingFeatureOptions> MarketingFeatures { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadata")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("packageDimensions")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public ProductPackageDimensionsOptions PackageDimensions { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("shippable")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Shippable { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("statementDescriptor")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string StatementDescriptor { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("taxCode")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TaxCode { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitLabel")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string UnitLabel { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("url")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Url { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ProductMarketingFeatureOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ProductPackageDimensionsOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("height")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double? Height { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("length")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double? Length { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("weight")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double? Weight { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("width")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double? Width { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ProductResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("object")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Object { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Description { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deleted")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Deleted { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("images")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> Images { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("shippable")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Shippable { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitLabel")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string UnitLabel { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("url")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Url { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ProductUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Description { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("images")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> Images { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("shippable")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Shippable { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitLabel")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string UnitLabel { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum PropertyAttributes
//    {

//        _0 = 0,

//        _512 = 512,

//        _1024 = 1024,

//        _4096 = 4096,

//        _8192 = 8192,

//        _16384 = 16384,

//        _32768 = 32768,

//        _62464 = 62464,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class PropertyInfo
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type DeclaringType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ReflectedType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("module")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Module Module { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCollectible { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MetadataToken { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MemberTypes MemberType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("propertyType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type PropertyType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public PropertyAttributes Attributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSpecialName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("canRead")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool CanRead { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("canWrite")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool CanWrite { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("getMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodInfo GetMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("setMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodInfo SetMethod { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class RefreshRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string RefreshToken { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class RegisterRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("password")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.StringLength(50)]
//        public string Password { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string PhoneNumber { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class RuntimeFieldHandle
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public IntPtr Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class RuntimeMethodHandle
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public IntPtr Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class RuntimeTypeHandle
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public IntPtr Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum SecurityRuleSet
//    {

//        _0 = 0,

//        _1 = 1,

//        _2 = 2,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class SessionResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string CustomerId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Status { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("url")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Url { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("subscriptionId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string SubscriptionId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class StructLayoutAttribute
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("typeId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public object TypeId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public LayoutKind Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class Subscription
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("planId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string PlanId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("nr")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public long Nr { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string CustomerId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("startDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
//        public System.DateTimeOffset StartDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Status { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("billingPeriod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string BillingPeriod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("cancelAt")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.DateTimeOffset? CancelAt { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("cancelAtPeriodEnd")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool CancelAtPeriodEnd { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("canceledAt")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.DateTimeOffset? CanceledAt { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("plan")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Plan Plan { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("user")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public AppUser User { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class TwoFactorRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("enable")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Enable { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("twoFactorCode")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TwoFactorCode { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("resetSharedKey")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ResetSharedKey { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("resetRecoveryCodes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ResetRecoveryCodes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("forgetMachine")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ForgetMachine { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class TwoFactorResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("sharedKey")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string SharedKey { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("recoveryCodesLeft")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public int RecoveryCodesLeft { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("recoveryCodes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> RecoveryCodes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isTwoFactorEnabled")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public bool IsTwoFactorEnabled { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isMachineRemembered")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public bool IsMachineRemembered { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class Type
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCollectible { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MetadataToken { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isInterface")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsInterface { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MemberTypes MemberType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("namespace")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Namespace { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("assemblyQualifiedName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string AssemblyQualifiedName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("fullName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string FullName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("assembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Assembly Assembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("module")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Module Module { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNested")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNested { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type DeclaringType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaringMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodBase DeclaringMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ReflectedType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("underlyingSystemType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type UnderlyingSystemType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isTypeDefinition")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsTypeDefinition { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isArray")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsArray { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isByRef")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsByRef { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPointer")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPointer { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsConstructedGenericType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericParameter")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericParameter { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeParameter")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericTypeParameter { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodParameter")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericMethodParameter { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeDefinition")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericTypeDefinition { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSZArray")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSZArray { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isVariableBoundArray")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsVariableBoundArray { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isByRefLike")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsByRefLike { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFunctionPointer")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFunctionPointer { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isUnmanagedFunctionPointer")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsUnmanagedFunctionPointer { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hasElementType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool HasElementType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("genericTypeArguments")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<Type> GenericTypeArguments { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("genericParameterPosition")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int GenericParameterPosition { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("genericParameterAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public GenericParameterAttributes GenericParameterAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public TypeAttributes Attributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAbstract { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isImport")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsImport { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSealed")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSealed { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSpecialName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isClass")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsClass { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamANDAssem")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedFamANDAssem { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamily")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedFamily { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamORAssem")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedFamORAssem { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedPrivate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedPrivate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedPublic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedPublic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNotPublic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNotPublic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPublic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAutoLayout")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAutoLayout { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isExplicitLayout")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsExplicitLayout { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isLayoutSequential")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsLayoutSequential { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAnsiClass")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAnsiClass { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAutoClass")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAutoClass { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isUnicodeClass")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsUnicodeClass { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCOMObject")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCOMObject { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isContextful")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsContextful { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isEnum")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsEnum { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isMarshalByRef")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsMarshalByRef { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPrimitive")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPrimitive { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isValueType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsValueType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSignatureType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSignatureType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecuritySafeCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityTransparent { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("structLayoutAttribute")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public StructLayoutAttribute StructLayoutAttribute { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("typeInitializer")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public ConstructorInfo TypeInitializer { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("typeHandle")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public RuntimeTypeHandle TypeHandle { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("guid")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Guid Guid { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("baseType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type BaseType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSerializable")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Obsolete]
//        public bool IsSerializable { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ContainsGenericParameters { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isVisible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsVisible { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum TypeAttributes
//    {

//        _0 = 0,

//        _1 = 1,

//        _2 = 2,

//        _3 = 3,

//        _4 = 4,

//        _5 = 5,

//        _6 = 6,

//        _7 = 7,

//        _8 = 8,

//        _16 = 16,

//        _24 = 24,

//        _32 = 32,

//        _128 = 128,

//        _256 = 256,

//        _1024 = 1024,

//        _2048 = 2048,

//        _4096 = 4096,

//        _8192 = 8192,

//        _16384 = 16384,

//        _65536 = 65536,

//        _131072 = 131072,

//        _196608 = 196608,

//        _262144 = 262144,

//        _264192 = 264192,

//        _1048576 = 1048576,

//        _12582912 = 12582912,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class TypeInfo
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<CustomAttributeData> CustomAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCollectible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCollectible { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("metadataToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int MetadataToken { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isInterface")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsInterface { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("memberType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MemberTypes MemberType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("namespace")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Namespace { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("assemblyQualifiedName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string AssemblyQualifiedName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("fullName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string FullName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("assembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Assembly Assembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("module")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Module Module { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNested")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNested { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaringType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type DeclaringType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaringMethod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public MethodBase DeclaringMethod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("reflectedType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type ReflectedType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("underlyingSystemType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type UnderlyingSystemType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isTypeDefinition")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsTypeDefinition { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isArray")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsArray { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isByRef")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsByRef { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPointer")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPointer { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isConstructedGenericType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsConstructedGenericType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericParameter")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericParameter { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeParameter")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericTypeParameter { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericMethodParameter")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericMethodParameter { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isGenericTypeDefinition")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsGenericTypeDefinition { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSZArray")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSZArray { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isVariableBoundArray")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsVariableBoundArray { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isByRefLike")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsByRefLike { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isFunctionPointer")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsFunctionPointer { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isUnmanagedFunctionPointer")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsUnmanagedFunctionPointer { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("hasElementType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool HasElementType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("genericTypeArguments")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<Type> GenericTypeArguments { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("genericParameterPosition")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int GenericParameterPosition { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("genericParameterAttributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public GenericParameterAttributes GenericParameterAttributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("attributes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public TypeAttributes Attributes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAbstract")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAbstract { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isImport")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsImport { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSealed")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSealed { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSpecialName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSpecialName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isClass")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsClass { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedAssembly")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedAssembly { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamANDAssem")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedFamANDAssem { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamily")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedFamily { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedFamORAssem")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedFamORAssem { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedPrivate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedPrivate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNestedPublic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNestedPublic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isNotPublic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsNotPublic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPublic { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAutoLayout")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAutoLayout { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isExplicitLayout")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsExplicitLayout { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isLayoutSequential")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsLayoutSequential { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAnsiClass")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAnsiClass { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isAutoClass")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsAutoClass { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isUnicodeClass")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsUnicodeClass { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isCOMObject")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsCOMObject { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isContextful")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsContextful { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isEnum")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsEnum { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isMarshalByRef")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsMarshalByRef { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPrimitive")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPrimitive { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isValueType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsValueType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSignatureType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSignatureType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecuritySafeCritical")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecuritySafeCritical { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSecurityTransparent")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsSecurityTransparent { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("structLayoutAttribute")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public StructLayoutAttribute StructLayoutAttribute { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("typeInitializer")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public ConstructorInfo TypeInitializer { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("typeHandle")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public RuntimeTypeHandle TypeHandle { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("guid")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Guid Guid { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("baseType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Type BaseType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isSerializable")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Obsolete]
//        public bool IsSerializable { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("containsGenericParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ContainsGenericParameters { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isVisible")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsVisible { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("genericTypeParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<Type> GenericTypeParameters { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaredConstructors")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<ConstructorInfo> DeclaredConstructors { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaredEvents")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<EventInfo> DeclaredEvents { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaredFields")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<FieldInfo> DeclaredFields { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaredMembers")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<MemberInfo> DeclaredMembers { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaredMethods")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<MethodInfo> DeclaredMethods { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaredNestedTypes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<TypeInfo> DeclaredNestedTypes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("declaredProperties")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<PropertyInfo> DeclaredProperties { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("implementedInterfaces")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<Type> ImplementedInterfaces { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class UserResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string CustomerId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isEmailConfirmed")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsEmailConfirmed { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class UserSubResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("planId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string PlanId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string CustomerId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("billingPeriod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string BillingPeriod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("startDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.DateTimeOffset StartDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("nr")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int Nr { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Status { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("user")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public UserResponse User { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("plan")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public Plan Plan { get; set; }

//    }



//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ApiException : System.Exception
//    {
//        public int StatusCode { get; private set; }

//        public string Response { get; private set; }

//        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
//            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
//        {
//            StatusCode = statusCode;
//            Response = response;
//            Headers = headers;
//        }

//        public override string ToString()
//        {
//            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ApiException<TResult> : ApiException
//    {
//        public TResult Result { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
//            : base(message, statusCode, response, headers, innerException)
//        {
//            Result = result;
//        }
//    }

//}

//#pragma warning restore 1591
//#pragma warning restore 1573
//#pragma warning restore 472
//#pragma warning restore 114
//#pragma warning restore 108
//#pragma warning restore 3016
//#pragma warning restore 8603