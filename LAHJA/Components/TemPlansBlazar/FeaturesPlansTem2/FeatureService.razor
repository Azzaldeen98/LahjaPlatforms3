@using LAHJA.Data.BlazarComponents.Authentication
@inject NavigationManager Navigation
@using LAHJA.Data.BlazarComponents.Plans.TemFeturePlans2.Model
@inject ISnackbar Snackbar
@if (@Params != null)
{
    <MudItem xs="12" sm="6" md="4">
        <MudCard Class="plan-card">



            <MudText Typo="Typo.body1" Align="Align.Center">


               
                <strong>Name</strong>
                 @Params.Name
            
            </MudText>
            <MudCardContent>
                <MudText Typo="Typo.body1" Class="mb-1">
                    <MudIcon Icon="@Icons.Custom.Uncategorized.AlertSuccess" Color="Color.Primary" />
                    <strong>Price:</strong>
                    @totalPrice
                </MudText>

                <MudText Typo="Typo.body1" Class="mb-1"><strong>
                    
                     <MudIcon Icon="@Icons.Custom.Uncategorized.AlertSuccess" Color="Color.Primary" />
                    Description:</strong> @Params.Description</MudText>
                <MudList Dense="true">

                    <MudText Typo="Typo.body1"><strong> 
                        <MudIcon Icon="@Icons.Custom.Uncategorized.AlertSuccess" Color="Color.Primary" />Features:</strong></MudText>






                    @foreach (var feature in Params.Services)
                    {
                        <MudListItem>

                            <Service auth="@auth" Params="feature"/>
                           
                        </MudListItem>
                    }
                    @foreach (var feature in Params.numberOfServices)
                    {

                        <NumberOfService auth="@auth" Params="feature" OnClickEdit="ONclickEditNumberService" OnClickDelete="ONclickDeleteNumberService" />
                           
                        
                    }
                </MudList>
          


                   

             
 
             
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(()=>Submit(@Params))" Class="select-button">Select Plan</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
}
else
{
    
        <MudAlert Severity="Severity.Error">@Error</MudAlert>
  
}


@code 
{

    public string Error { get; set; } = "No Data";
    private decimal totalPrice;
    [Parameter] public Data.BlazarComponents.Shared.PageTransition PageTransition { get; set; }
    [Parameter] public PlansFeture? Params { get; set; }
    [Parameter] public AuthComponent? auth { get; set; }
    [Parameter] public EventCallback<PlansFeture> OnClickSelect { get; set; }
    [Parameter] public string IdCategry { get; set; }



    protected override async Task OnInitializedAsync()
    {
        totalPrice = Params.Price;

    }
  
    private Color GetChipColor(bool status)
    {
        return status == true ? Color.Success : Color.Error;
    }
    private async Task Submit(PlansFeture input)
    {
        try
        {
            if (auth.Isauth)
            {
                if (OnClickSelect.HasDelegate)
                {
                    await OnClickSelect.InvokeAsync(input);
                }

            }
            else
            {

                Navigation.NavigateTo(auth.PageRouterName);

            }

            
           

        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }


    private async void ONclickDeleteNumberService(Data.BlazarComponents.Plans.TemFeturePlans2.Model.NumberOfService numberOfService)
    {
        try
        {
            Params.numberOfServices.Remove(numberOfService);
            CalculateTotalPrice();
            StateHasChanged();
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }

    private async void ONclickEditNumberService(Data.BlazarComponents.Plans.TemFeturePlans2.Model.NumberOfService numberOfService)
    {
        try
        {
           
            CalculateTotalPrice();
              StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }
    private void CalculateTotalPrice()
    {

        try
        {
            totalPrice = 0;
            foreach (var item in Params.Services)
            {
                totalPrice += item.Price;
            }

            foreach (var item in Params.numberOfServices)
            {
                totalPrice += item.Price;
            }

    

        }
        catch(Exception ex)
        {
            
        }
    }

     


    }

 
